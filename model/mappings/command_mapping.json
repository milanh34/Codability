{
    "commands": [
        {
            "pattern": "java main function",
            "template": "public class Main {\n    public static void main(String[] args) {\n        \n\n"
        },
        {
            "pattern": "java print (.+)",
            "template": "System.out.println(\"$1\");\n"
        },
        {
            "pattern": "body",
            "template": "#include<stdio.h>\n\nint main() {\n "
        },
        {
            "pattern": "close the function",
            "template": "}\n"
        },
        {
            "pattern": "end the code",
            "template": "}\n"
        },
        {
            "pattern": "include library (.+)",
            "template": "#include<$1.h>\n"
        },
        {
            "pattern": "program with header comments",
            "template": "/*\n * Program: \n * Author: \n * Date: \n * Description: \n */\n\n#include<stdio.h>\n\nvoid main() {\n"
        },
        {
            "pattern": "declare int (.+)",
            "template": "int $1;"
        },
        {
            "pattern": "declare float (.+)",
            "template": "float $1;"
        },
        {
            "pattern": "declare char (.+)",
            "template": "char $1;"
        },
        {
            "pattern": "declare double (.+)",
            "template": "double $1;"
        },
        {
            "pattern": "declare string (.+)",
            "template": "char $1[100];"
        },
        {
            "pattern": "declare array (.+) of size (.+)",
            "template": "int $1[$2];"
        },
        {
            "pattern": "declare array (.+) of type (.+) and size (.+)",
            "template": "$2 $1[$3];"
        },
        {
            "pattern": "declare constant (.+) with value (.+)",
            "template": "#define $1 $2"
        },
        {
            "pattern": "declare pointer (.+) to type (.+)",
            "template": "$2* $1;"
        },
        {
            "pattern": "initialise (.+) (.+)",
            "template": "$1 = $2;"
        },
        {
            "pattern": "initialise array (.+) with values (.+)",
            "template": "int $1[] = {$2};"
        },
        {
            "pattern": "initialise typed array (.+) of (.+) with values (.+)",
            "template": "$2 $1[] = {$3};"
        },
        {
            "pattern": "assign memory for (.+) of size (.+)",
            "template": "$1 = (int*)malloc($2 * sizeof(int));"
        },
        {
            "pattern": "assign typed memory for (.+) of type (.+) and size (.+)",
            "template": "$1 = ($2*)malloc($3 * sizeof($2));"
        },
        {
            "pattern": "free memory for (.+)",
            "template": "free($1);"
        },
        {
            "pattern": "get integer input for (.+)",
            "template": "printf(\"Enter value for $1: \");\nscanf(\"%d\", &$1);"
        },
        {
            "pattern": "get float input for (.+)",
            "template": "printf(\"Enter value for $1: \");\nscanf(\"%f\", &$1);"
        },
        {
            "pattern": "get string input for (.+)",
            "template": "printf(\"Enter value for $1: \");\nscanf(\"%s\", $1);"
        },
        {
            "pattern": "get character input for (.+)",
            "template": "printf(\"Enter value for $1: \");\nscanf(\" %c\", &$1);"
        },
        {
            "pattern": "get double input for (.+)",
            "template": "printf(\"Enter value for $1: \");\nscanf(\"%lf\", &$1);"
        },
        {
            "pattern": "get multiple inputs for (.+)",
            "template": "printf(\"Enter values: \");\nscanf(\"%d %d %d\", &$1);"
        },
        {
            "pattern": "get formatted input (.+)",
            "template": "scanf(\"$1\");"
        },
        {
            "pattern": "print int (.+)",
            "template": "printf(\"%d\", $1);"
        },
        {
            "pattern": "print float (.+)",
            "template": "printf(\"%f\", $1);"
        },
        {
            "pattern": "print char (.+)",
            "template": "printf(\"%c\", $1);"
        },
        {
            "pattern": "print string (.+)",
            "template": "printf(\"%s\", $1);"
        },
        {
            "pattern": "print line (.+)",
            "template": "printf(\"$1\\n\");"
        },
        {
            "pattern": "print double (.+)",
            "template": "printf(\"%lf\", $1);"
        },
        {
            "pattern": "print formatted (.+)",
            "template": "printf(\"$1\");"
        },
        {
            "pattern": "print with newline (.+)",
            "template": "printf(\"$1\\n\");"
        },
        {
            "pattern": "print address of (.+)",
            "template": "printf(\"%p\", (void*)&$1);"
        },
        {
            "pattern": "print hex value of (.+)",
            "template": "printf(\"%x\", $1);"
        },
        {
            "pattern": "for loop with (.+) from (.+) to (.+)",
            "template": "for(int $1 = $2; $1 < $3; $1++) {\n$INNER\n}"
        },
        {
            "pattern": "for loop with (.+) from (.+) to (.+) step (.+)",
            "template": "for(int $1 = $2; $1 < $3; $1 += $4) {\n$INNER\n}"
        },
        {
            "pattern": "for loop with (.+) from (.+) down to (.+)",
            "template": "for(int $1 = $2; $1 >= $3; $1--) {\n$INNER\n}"
        },
        {
            "pattern": "if statement with (.+)",
            "template": "if($1) {\n$INNER\n}"
        },
        {
            "pattern": "if else statement with (.+)",
            "template": "if($1) {\n$INNER\n} else {\n$INNER\n}"
        },
        {
            "pattern": "if else if statement with (.+) and (.+)",
            "template": "if($1) {\n$INNER\n} else if($2) {\n$INNER\n} else {\n$INNER\n}"
        },
        {
            "pattern": "while loop with (.+)",
            "template": "while($1) {\n$INNER\n}"
        },
        {
            "pattern": "do while loop with (.+)",
            "template": "do {\n$INNER\n} while($1);"
        },
        {
            "pattern": "infinite loop",
            "template": "while(1) {\n$INNER\n}"
        },
        {
            "pattern": "break statement",
            "template": "break;"
        },
        {
            "pattern": "continue statement",
            "template": "continue;"
        },
        {
            "pattern": "goto label (.+)",
            "template": "goto $1;"
        },
        {
            "pattern": "define label (.+)",
            "template": "$1:"
        },
        {
            "pattern": "ternary operation with (.+) ? (.+) : (.+)",
            "template": "($1) ? ($2) : ($3)"
        },
        {
            "pattern": "switch on (.+)",
            "template": "switch($1) {\n$INNER\n}"
        },
        {
            "pattern": "case (.+)",
            "template": "case $1: {\n$INNER\n} break;"
        },
        {
            "pattern": "default case",
            "template": "default: {\n$INNER\n} break;"
        },
        {
            "pattern": "case block without break (.+)",
            "template": "case $1: {\n$INNER\n}"
        },
        {
            "pattern": "create function (.+) returning (.+)",
            "template": "$2 $1() {\n$INNER\n}"
        },
        {
            "pattern": "create function (.+) with parameters (.+) returning (.+)",
            "template": "$3 $1($2) {\n$INNER\n}"
        },
        {
            "pattern": "create void function (.+)",
            "template": "void $1() {\n$INNER\n}"
        },
        {
            "pattern": "create void function (.+) with parameters (.+)",
            "template": "void $1($2) {\n$INNER\n}"
        },
        {
            "pattern": "declare function prototype (.+) returning (.+)",
            "template": "$2 $1();"
        },
        {
            "pattern": "declare function prototype (.+) with parameters (.+) returning (.+)",
            "template": "$3 $1($2);"
        },
        {
            "pattern": "return (.+)",
            "template": "return $1;"
        },
        {
            "pattern": "call function (.+)",
            "template": "$1();"
        },
        {
            "pattern": "call function (.+) with arguments (.+)",
            "template": "$1($2);"
        },
        {
            "pattern": "calculate sum of (.+) and (.+)",
            "template": "$1 + $2"
        },
        {
            "pattern": "calculate product of (.+) and (.+)",
            "template": "$1 * $2"
        },
        {
            "pattern": "calculate difference between (.+) and (.+)",
            "template": "$1 - $2"
        },
        {
            "pattern": "calculate quotient of (.+) divided by (.+)",
            "template": "$1 / $2"
        },
        {
            "pattern": "calculate remainder of (.+) divided by (.+)",
            "template": "$1 % $2"
        },
        {
            "pattern": "calculate power of (.+) raised to (.+)",
            "template": "pow($1, $2)"
        },
        {
            "pattern": "calculate square root of (.+)",
            "template": "sqrt($1)"
        },
        {
            "pattern": "calculate absolute value of (.+)",
            "template": "abs($1)"
        },
        {
            "pattern": "increment (.+)",
            "template": "$1++"
        },
        {
            "pattern": "decrement (.+)",
            "template": "$1--"
        },
        {
            "pattern": "pre increment (.+)",
            "template": "++$1"
        },
        {
            "pattern": "pre decrement (.+)",
            "template": "--$1"
        },
        {
            "pattern": "compound add (.+) to (.+)",
            "template": "$1 += $2"
        },
        {
            "pattern": "compound subtract (.+) from (.+)",
            "template": "$1 -= $2"
        },
        {
            "pattern": "compound multiply (.+) by (.+)",
            "template": "$1 *= $2"
        },
        {
            "pattern": "compound divide (.+) by (.+)",
            "template": "$1 /= $2"
        },
        {
            "pattern": "logical AND of (.+) and (.+)",
            "template": "$1 && $2"
        },
        {
            "pattern": "logical OR of (.+) and (.+)",
            "template": "$1 || $2"
        },
        {
            "pattern": "logical NOT of (.+)",
            "template": "!$1"
        },
        {
            "pattern": "check equality of (.+) and (.+)",
            "template": "$1 == $2"
        },
        {
            "pattern": "check inequality of (.+) and (.+)",
            "template": "$1 != $2"
        },
        {
            "pattern": "check if (.+) greater than (.+)",
            "template": "$1 > $2"
        },
        {
            "pattern": "check if (.+) less than (.+)",
            "template": "$1 < $2"
        },
        {
            "pattern": "check if (.+) greater than or equal to (.+)",
            "template": "$1 >= $2"
        },
        {
            "pattern": "check if (.+) less than or equal to (.+)",
            "template": "$1 <= $2"
        },
        {
            "pattern": "bitwise AND of (.+) and (.+)",
            "template": "$1 & $2"
        },
        {
            "pattern": "bitwise OR of (.+) and (.+)",
            "template": "$1 | $2"
        },
        {
            "pattern": "bitwise XOR of (.+) and (.+)",
            "template": "$1 ^ $2"
        },
        {
            "pattern": "bitwise NOT of (.+)",
            "template": "~$1"
        },
        {
            "pattern": "left shift (.+) by (.+) bits",
            "template": "$1 << $2"
        },
        {
            "pattern": "right shift (.+) by (.+) bits",
            "template": "$1 >> $2"
        },
        {
            "pattern": "declare file pointer (.+)",
            "template": "FILE *$1;"
        },
        {
            "pattern": "open file (.+) for reading",
            "template": "$1 = fopen(\"filename.txt\", \"r\");"
        },
        {
            "pattern": "open file (.+) for writing",
            "template": "$1 = fopen(\"filename.txt\", \"w\");"
        },
        {
            "pattern": "open file (.+) for appending",
            "template": "$1 = fopen(\"filename.txt\", \"a\");"
        },
        {
            "pattern": "check if file (.+) opened successfully",
            "template": "if($1 == NULL) {\n    printf(\"Error opening file.\");\n    return 1;\n}"
        },
        {
            "pattern": "read line from file (.+) into (.+)",
            "template": "fgets($2, 100, $1);"
        },
        {
            "pattern": "read formatted data from file (.+)",
            "template": "fscanf($1, \"%d %s\", &num, str);"
        },
        {
            "pattern": "write formatted data to file (.+)",
            "template": "fprintf($1, \"Data: %d %s\\n\", num, str);"
        },
        {
            "pattern": "close file (.+)",
            "template": "fclose($1);"
        },
        {
            "pattern": "define struct (.+)",
            "template": "struct $1 {\n$INNER\n};"
        },
        {
            "pattern": "define union (.+)",
            "template": "union $1 {\n$INNER\n};"
        },
        {
            "pattern": "define enum (.+)",
            "template": "enum $1 {\n$INNER\n};"
        },
        {
            "pattern": "typedef struct (.+) as (.+)",
            "template": "typedef struct $1 {\n$INNER\n} $2;"
        },
        {
            "pattern": "declare struct variable (.+) of type (.+)",
            "template": "struct $2 $1;"
        },
        {
            "pattern": "access struct member (.+) of (.+)",
            "template": "$2.$1"
        },
        {
            "pattern": "access struct pointer member (.+) of (.+)",
            "template": "$2->$1"
        },
        {
            "pattern": "code to find maximum of (.+) numbers",
            "template": "#include<stdio.h>\n\nvoid main() {\n    int n = $1, max, num;\n    printf(\"Enter %d numbers:\\n\", n);\n    scanf(\"%d\", &max);\n    for(int i = 1; i < n; i++) {\n        scanf(\"%d\", &num);\n        if(num > max) max = num;\n    }\n    printf(\"Maximum number is: %d\", max);\n}"
        },
        {
            "pattern": "code to check prime number (.+)",
            "template": "#include<stdio.h>\n\nvoid main() {\n    int n = $1, isPrime = 1;\n    if(n <= 1) isPrime = 0;\n    for(int i = 2; i <= n/2; i++) {\n        if(n % i == 0) {\n            isPrime = 0;\n            break;\n        }\n    }\n    if(isPrime) printf(\"%d is prime\", n);\n    else printf(\"%d is not prime\", n);\n}"
        },
        {
            "pattern": "code to find fibonacci series till (.+)",
            "template": "#include<stdio.h>\n\nvoid main() {\n    int n = $1, first = 0, second = 1, next;\n    printf(\"Fibonacci Series: %d %d \", first, second);\n    for(int i = 2; i < n; i++) {\n        next = first + second;\n        printf(\"%d \", next);\n        first = second;\n        second = next;\n    }\n}"
        },
        {
            "pattern": "code to sort array of size (.+)",
            "template": "#include<stdio.h>\n\nvoid main() {\n    int n = $1, arr[n], temp;\n    printf(\"Enter %d numbers:\\n\", n);\n    for(int i = 0; i < n; i++) scanf(\"%d\", &arr[i]);\n    for(int i = 0; i < n-1; i++) {\n        for(int j = 0; j < n-i-1; j++) {\n            if(arr[j] > arr[j+1]) {\n                temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }\n    }\n    printf(\"Sorted array: \");\n    for(int i = 0; i < n; i++) printf(\"%d \", arr[i]);\n}"
        },
        {
            "pattern": "code to calculate gcd of (.+) and (.+)",
            "template": "#include<stdio.h>\n\nvoid main() {\n    int a = $1, b = $2, gcd;\n    for(int i = 1; i <= a && i <= b; i++) {\n        if(a % i == 0 && b % i == 0) gcd = i;\n    }\n    printf(\"GCD of %d and %d is: %d\", a, b, gcd);\n}"
        },
        {
            "pattern": "code to find factorial of (.+)",
            "template": "#include<stdio.h>\n\nvoid main() {\n    int n = $1;\n    long long factorial = 1;\n    for(int i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n    printf(\"Factorial of %d is %lld\", n, factorial);\n}"
        },
        {
            "pattern": "code to check palindrome number (.+)",
            "template": "#include<stdio.h>\n\nvoid main() {\n    int n = $1, temp = n, reverse = 0, remainder;\n    while(temp != 0) {\n        remainder = temp % 10;\n        reverse = reverse * 10 + remainder;\n        temp /= 10;\n    }\n    if(reverse == n) printf(\"%d is a palindrome\", n);\n    else printf(\"%d is not a palindrome\", n);\n}"
        },
        {
            "pattern": "code to check armstrong number (.+)",
            "template": "#include<stdio.h>\n#include<math.h>\n\nvoid main() {\n    int n = $1, temp = n, sum = 0, digits = 0, remainder;\n    while(temp != 0) {\n        temp /= 10;\n        digits++;\n    }\n    temp = n;\n    while(temp != 0) {\n        remainder = temp % 10;\n        sum += pow(remainder, digits);\n        temp /= 10;\n    }\n    if(sum == n) printf(\"%d is an Armstrong number\", n);\n    else printf(\"%d is not an Armstrong number\", n);\n}"
        },
        {
            "pattern": "code for binary search in array",
            "template": "#include<stdio.h>\n\nint binarySearch(int arr[], int left, int right, int target) {\n    while(left <= right) {\n        int mid = left + (right - left) / 2;\n        if(arr[mid] == target) return mid;\n        if(arr[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}\n\nvoid main() {\n    int arr[] = {2, 3, 4, 10, 40};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    int target = 10;\n    int result = binarySearch(arr, 0, n-1, target);\n    if(result == -1) printf(\"Element not found\");\n    else printf(\"Element found at index %d\", result);\n}"
        },
        {
            "pattern": "code for linear search in array",
            "template": "#include<stdio.h>\n\nint linearSearch(int arr[], int n, int target) {\n    for(int i = 0; i < n; i++) {\n        if(arr[i] == target) return i;\n    }\n    return -1;\n}\n\nvoid main() {\n    int arr[] = {2, 3, 4, 10, 40};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    int target = 10;\n    int result = linearSearch(arr, n, target);\n    if(result == -1) printf(\"Element not found\");\n    else printf(\"Element found at index %d\", result);\n}"
        },
        {
            "pattern": "declare 2D array (.+) with rows (.+) and columns (.+)",
            "template": "int $1[$2][$3];"
        },
        {
            "pattern": "initialize 2D array (.+) with size (.+) (.+)",
            "template": "int $1[$2][$3];\nfor(int i = 0; i < $2; i++) {\n    for(int j = 0; j < $3; j++) {\n        $1[i][j] = 0;\n    }\n}"
        },
        {
            "pattern": "input 2D array (.+) with rows (.+) and columns (.+)",
            "template": "printf(\"Enter elements for the %dx%d array:\\n\", $2, $3);\nfor(int i = 0; i < $2; i++) {\n    for(int j = 0; j < $3; j++) {\n        scanf(\"%d\", &$1[i][j]);\n    }\n}"
        },
        {
            "pattern": "print 2D array (.+) with rows (.+) and columns (.+)",
            "template": "printf(\"Array elements:\\n\");\nfor(int i = 0; i < $2; i++) {\n    for(int j = 0; j < $3; j++) {\n        printf(\"%d \", $1[i][j]);\n    }\n    printf(\"\\n\");\n}"
        },
        {
            "pattern": "declare 3D array (.+) with dimensions (.+) (.+) (.+)",
            "template": "int $1[$2][$3][$4];"
        },
        {
            "pattern": "read array (.+) of size (.+)",
            "template": "printf(\"Enter %d elements:\\n\", $2);\nfor(int i = 0; i < $2; i++) {\n    scanf(\"%d\", &$1[i]);\n}"
        },
        {
            "pattern": "print array (.+) of size (.+)",
            "template": "printf(\"Array elements: \");\nfor(int i = 0; i < $2; i++) {\n    printf(\"%d \", $1[i]);\n}"
        },
        {
            "pattern": "find minimum in array (.+) of size (.+)",
            "template": "int min = $1[0];\nfor(int i = 1; i < $2; i++) {\n    if($1[i] < min) min = $1[i];\n}"
        },
        {
            "pattern": "find maximum in array (.+) of size (.+)",
            "template": "int max = $1[0];\nfor(int i = 1; i < $2; i++) {\n    if($1[i] > max) max = $1[i];\n}"
        },
        {
            "pattern": "find sum of array (.+) of size (.+)",
            "template": "int sum = 0;\nfor(int i = 0; i < $2; i++) {\n    sum += $1[i];\n}"
        },
        {
            "pattern": "find average of array (.+) of size (.+)",
            "template": "int sum = 0;\nfor(int i = 0; i < $2; i++) {\n    sum += $1[i];\n}\nfloat average = (float)sum / $2;"
        },
        {
            "pattern": "reverse array (.+) of size (.+)",
            "template": "for(int i = 0; i < $2/2; i++) {\n    int temp = $1[i];\n    $1[i] = $1[$2-1-i];\n    $1[$2-1-i] = temp;\n}"
        },
        {
            "pattern": "search element (.+) in array (.+) of size (.+)",
            "template": "int found = 0, position = -1;\nfor(int i = 0; i < $3; i++) {\n    if($2[i] == $1) {\n        found = 1;\n        position = i;\n        break;\n    }\n}\nif(found) printf(\"Element found at position %d\", position);\nelse printf(\"Element not found\");"
        },
        {
            "pattern": "merge arrays (.+) and (.+) of sizes (.+) and (.+)",
            "template": "int merged[$3 + $4];\nint i = 0, j = 0, k = 0;\nwhile(i < $3 && j < $4) {\n    if($1[i] <= $2[j]) merged[k++] = $1[i++];\n    else merged[k++] = $2[j++];\n}\nwhile(i < $3) merged[k++] = $1[i++];\nwhile(j < $4) merged[k++] = $2[j++];"
        },
        {
            "pattern": "copy array (.+) to (.+) of size (.+)",
            "template": "for(int i = 0; i < $3; i++) {\n    $2[i] = $1[i];\n}"
        },
        {
            "pattern": "find frequency of element (.+) in array (.+) of size (.+)",
            "template": "int frequency = 0;\nfor(int i = 0; i < $3; i++) {\n    if($2[i] == $1) frequency++;\n}"
        },
        {
            "pattern": "rotate array (.+) left by (.+) positions",
            "template": "void rotateLeft(int arr[], int n, int d) {\n    int temp[d];\n    for(int i = 0; i < d; i++) temp[i] = arr[i];\n    for(int i = d; i < n; i++) arr[i-d] = arr[i];\n    for(int i = 0; i < d; i++) arr[n-d+i] = temp[i];\n}"
        },
        {
            "pattern": "rotate array (.+) right by (.+) positions",
            "template": "void rotateRight(int arr[], int n, int d) {\n    int temp[d];\n    for(int i = 0; i < d; i++) temp[i] = arr[n-d+i];\n    for(int i = n-d-1; i >= 0; i--) arr[i+d] = arr[i];\n    for(int i = 0; i < d; i++) arr[i] = temp[i];\n}"
        },
        {
            "pattern": "find second largest in array (.+) of size (.+)",
            "template": "int largest = $1[0], secondLargest = $1[0];\nfor(int i = 1; i < $2; i++) {\n    if($1[i] > largest) {\n        secondLargest = largest;\n        largest = $1[i];\n    } else if($1[i] > secondLargest && $1[i] < largest) {\n        secondLargest = $1[i];\n    }\n}"
        },
        {
            "pattern": "sort array (.+) in descending order of size (.+)",
            "template": "for(int i = 0; i < $2-1; i++) {\n    for(int j = 0; j < $2-i-1; j++) {\n        if($1[j] < $1[j+1]) {\n            int temp = $1[j];\n            $1[j] = $1[j+1];\n            $1[j+1] = temp;\n        }\n    }\n}"
        },
        {
            "pattern": "remove duplicates from array (.+) of size (.+)",
            "template": "int j = 0;\nfor(int i = 1; i < $2; i++) {\n    if($1[i] != $1[j]) {\n        j++;\n        $1[j] = $1[i];\n    }\n}\nint newSize = j + 1;"
        },
        {
            "pattern": "check if array (.+) is sorted of size (.+)",
            "template": "int isSorted = 1;\nfor(int i = 0; i < $2-1; i++) {\n    if($1[i] > $1[i+1]) {\n        isSorted = 0;\n        break;\n    }\n}"
        },
        {
            "pattern": "get string length of (.+)",
            "template": "int length = strlen($1);"
        },
        {
            "pattern": "copy string (.+) to (.+)",
            "template": "strcpy($2, $1);"
        },
        {
            "pattern": "concatenate strings (.+) and (.+)",
            "template": "strcat($1, $2);"
        },
        {
            "pattern": "compare strings (.+) and (.+)",
            "template": "int result = strcmp($1, $2);"
        },
        {
            "pattern": "convert string (.+) to uppercase",
            "template": "for(int i = 0; $1[i]; i++) {\n    $1[i] = toupper($1[i]);\n}"
        },
        {
            "pattern": "convert string (.+) to lowercase",
            "template": "for(int i = 0; $1[i]; i++) {\n    $1[i] = tolower($1[i]);\n}"
        },
        {
            "pattern": "find substring (.+) in string (.+)",
            "template": "char *ptr = strstr($2, $1);\nif(ptr) printf(\"Substring found at position %d\", ptr - $2);\nelse printf(\"Substring not found\");"
        },
        {
            "pattern": "reverse string (.+)",
            "template": "int len = strlen($1);\nfor(int i = 0; i < len/2; i++) {\n    char temp = $1[i];\n    $1[i] = $1[len-1-i];\n    $1[len-1-i] = temp;\n}"
        },
        {
            "pattern": "count words in string (.+)",
            "template": "int words = 0;\nfor(int i = 0; $1[i]; i++) {\n    if($1[i] == ' ' && $1[i+1] != ' ' && $1[i+1] != '\\0') words++;\n}\nwords++;"
        },
        {
            "pattern": "check anagram strings (.+) and (.+)",
            "template": "int freq[26] = {0};\nfor(int i = 0; $1[i]; i++) freq[$1[i] - 'a']++;\nfor(int i = 0; $2[i]; i++) freq[$2[i] - 'a']--;\nint isAnagram = 1;\nfor(int i = 0; i < 26; i++) {\n    if(freq[i] != 0) {\n        isAnagram = 0;\n        break;\n    }\n}"
        },
        {
            "pattern": "find first non repeating character in string (.+)",
            "template": "int freq[256] = {0};\nfor(int i = 0; $1[i]; i++) freq[$1[i]]++;\nchar firstNonRepeating = '\\0';\nfor(int i = 0; $1[i]; i++) {\n    if(freq[$1[i]] == 1) {\n        firstNonRepeating = $1[i];\n        break;\n    }\n}\nif(firstNonRepeating) printf(\"First non-repeating character: %c\", firstNonRepeating);\nelse printf(\"No non-repeating character found\");"
        },
        {
            "pattern": "start coding",
            "template": "START_CODE_MODE"
        },
        {
            "pattern": "write code",
            "template": "START_CODE_MODE"
        },
        {
            "pattern": "begin coding",
            "template": "START_CODE_MODE"
        },
        {
            "pattern": "start writing",
            "template": "START_CODE_MODE"
        },
        {
            "pattern": "stop coding",
            "template": "STOP_CODE_MODE"
        },
        {
            "pattern": "end coding",
            "template": "STOP_CODE_MODE"
        },
        {
            "pattern": "finish coding",
            "template": "STOP_CODE_MODE"
        },
        {
            "pattern": "stop writing",
            "template": "STOP_CODE_MODE"
        },
        {
            "pattern": "run code",
            "template": "RUN_CODE_COMMAND"
        },
        {
            "pattern": "execute code",
            "template": "RUN_CODE_COMMAND"
        },
        {
            "pattern": "execute",
            "template": "RUN_CODE_COMMAND"
        },
        {
            "pattern": "switch theme",
            "template": "TOGGLE_THEME_COMMAND"
        },
        {
            "pattern": "toggle theme",
            "template": "TOGGLE_THEME_COMMAND"
        },
        {
            "pattern": "light theme",
            "template": "LIGHT_THEME_COMMAND"
        },
        {
            "pattern": "light mode",
            "template": "LIGHT_THEME_COMMAND"
        },
        {
            "pattern": "dark theme",
            "template": "DARK_THEME_COMMAND"
        },
        {
            "pattern": "dark mode",
            "template": "DARK_THEME_COMMAND"
        },
        {
            "pattern": "toggle sidebar",
            "template": "TOGGLE_SIDEBAR_COMMAND"
        },
        {
            "pattern": "hide sidebar",
            "template": "TOGGLE_SIDEBAR_COMMAND"
        },
        {
            "pattern": "show sidebar",
            "template": "TOGGLE_SIDEBAR_COMMAND"
        },
        {
            "pattern": "save code",
            "template": "SAVE_FILE_COMMAND"
        },
        {
            "pattern": "save file",
            "template": "SAVE_FILE_COMMAND"
        },
        {
            "pattern": "clear code",
            "template": "CLEAR_EDITOR_COMMAND"
        },
        {
            "pattern": "clear editor",
            "template": "CLEAR_EDITOR_COMMAND"
        },
        {
            "pattern": "undo",
            "template": "UNDO_COMMAND"
        },
        {
            "pattern": "undo last",
            "template": "UNDO_COMMAND"
        },
        {
            "pattern": "redo",
            "template": "REDO_COMMAND"
        },
        {
            "pattern": "redo last",
            "template": "REDO_COMMAND"
        },
        {
            "pattern": "increase font",
            "template": "INCREASE_FONT_COMMAND"
        },
        {
            "pattern": "bigger font",
            "template": "INCREASE_FONT_COMMAND"
        },
        {
            "pattern": "decrease font",
            "template": "DECREASE_FONT_COMMAND"
        },
        {
            "pattern": "smaller font",
            "template": "DECREASE_FONT_COMMAND"
        }
    ]
}